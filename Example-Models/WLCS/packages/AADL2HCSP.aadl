--*****************************************************READ ME************************************************

---Modeling of the Water Level Control System (WLCS)--a benchmark hybrid system
---The goal is to keep the water level (ws) between the lower desired limit (30) and the upper desired limit (60)
---Assumptions:
	-- 1) if the inflow valve is on at a particular time (t), water inflow is greater than water outflow
	-- 2) At the start the water level is greater than 60 but less than 61, so that Assertion Turn_Off is true 
	
	
--*************************************************************************************************************	

package AADL2HCSP
public
	with WLCS_Types;

	system WLCS
	end WLCS;

system implementation WLCS.impl
		subcomponents
			control_process: process Controller.impl;
			water_tank: abstract WaterTank.impl;
			sensor: device Sensor.impl;
			actuator: device Actuator.impl;
		
		connections
			w2c: port water_tank.wl -> sensor.w;
			s2c: port sensor.s -> control_process.sv;
			c2a: port control_process.cc -> actuator.c;
			a2w: port actuator.v -> water_tank.vc;
			
		annex hybrid{**
			
			invariant
			 << [h >= 30] and [h <= 60] >>
			
			behavior
			 WLCS ::= {control_process || water_tank || sensor || actuator} 
		**};
	end WLCS.impl;
	
---------process controller------
process Controller
	features
		sv: in data port WLCS_Types::SensorValue;
		cc: out data port WLCS_Types::ControlCmd;
end Controller;

process implementation Controller.impl
	subcomponents
		get_waterlevel: thread read_data.impl;
		set_valve: thread compute_cmd.impl;
		
	connections
		c1: port sv -> get_waterlevel.rip;
		conn: port get_waterlevel.rop -> set_valve.cip {Timing => Immediate;};
		c2: port set_valve.cop -> cc;

end Controller.impl;

-----thread read data------
thread read_data		
	features
		rip: in data port WLCS_Types::SensorValue;
		rop: out data port WLCS_Types::SensorValue;
		
	Properties
		Dispatch_Protocol => Periodic;
		Period => 10ms;
		Compute_Deadline => 30ms;
		Compute_Execution_Time => 25ms .. 25ms;
		
end read_data;

thread implementation read_data.impl
	annex hybrid{**
		
		assume
		<< true >>
		ensure
		 << not (exists t:Time in now-period .. now that (rop)@t) >>
		
		invariant
		 << true >> 
		
		variables
		 w: WLCS_Types::SensorValue
		 
		constants
		 period = 10ms
		
		behavior
		 Read_Value::=  rip?(w); wait period ; Write_Value
		 
		 Write_Value ::= rop!(w)

**};
end read_data.impl;


-----thread compute command-----
thread compute_cmd
	features
		cip: in data port WLCS_Types::SensorValue;
		cop: out data port WLCS_Types::ControlCmd;
		
	Properties
		Dispatch_Protocol => Periodic;
		Period => 10ms;
		Compute_Deadline => 30ms;
		Compute_Execution_Time => 25ms .. 25ms;
end compute_cmd;

thread implementation compute_cmd.impl
	annex hybrid{**
		assume
		 << cv = 'On' >>
		
		ensure
		 << [h >= 30] and [h <= 60]>> 
		
		invariant
		 << true >> 
		
		variables
		 cv : WLCS_Types::ControlCmd
		 h	: WLCS_Types::SensorValue
		 t	: WLCS_Types::Time
		 
		constants
		 period = 10 ms
		 
		behavior 
		 START ::=  cv := 'Off' & t := 0 & cip?(h) &
				 ([h >= 60]) -> DRAIN  &
				 ([h <= 30] or ([h >= 30] and [h < 60])) -> FILL
		 
		 DRAIN ::= cop!('Off') ;  wait period ; CHECK_DRAIN
		 
		 CHECK_DRAIN ::= ([cv = 'Off'] and (([h > 30] and [h < 60]) or [h >= 60])) -> DRAIN ;
						([h <= 30]) ->  FILL ;	// don't you think this should be modeled with & instead of ;			
						([h <= 29]) -> UNDER_FLOW
						
		 FILL ::=     cop!('On') & cv:='On' & wait period; CHECK_FILL
		 
		 CHECK_FILL ::= ([cv = 'On'] and (([h > 30] and [h < 60]) or [h <= 30])) -> FILL &
		 				([h >= 60]) ->  DRAIN &
		 				([h >= 61]) -> OVER_FLOW
		 				
		 OVER_FLOW  ::= stop 
		
		 UNDER_FLOW ::= stop
		 
	**};
	
end compute_cmd.impl;

------actuator-------
device Actuator
	features
		c: in data port WLCS_Types::ControlCmd;
		v: out data port WLCS_Types::ValveStatus;
end Actuator; 

device implementation Actuator.impl
	
end Actuator.impl;
------sensor--------
device Sensor
	features
		w: in data port WLCS_Types::WaterLevel;
		s: out data port WLCS_Types::SensorValue;
end Sensor;

device implementation Sensor.impl	
end Sensor.impl;

------water tank--------

abstract WaterTank
	features
		vc: in data port WLCS_Types::ValveStatus;
		wl: out data port WLCS_Types::WaterLevel;
end WaterTank;

abstract implementation WaterTank.impl
	
	annex hybrid{**
			
		assume
		 << [t = 0] and [h = 31] and [v = 'On'] >>
		
		ensure
		 << not (exists t:Time in now-period .. now that (wl)@t) >>
		 
		invariant
		 << true >>
		
		variables
		 t :  WLCS_Types::Time
		 v :  WLCS_Types::ValveStatus
		 h :  WLCS_Types::WaterLevel
		 
		constants
		  Qmax = 0.007 cmps, 
		  g	   = 9.8 mpss, 
		  pi   = 3.14,    
		  r    = 0.0254 m, 
		  u    = 1, 
		  period   = 10 ms,  

		 behavior
		  Plant ::= t:=0 & 
		  		'DT 1 h = (v*Qmax) - (pi * (r^2) * 1.414 * (g^0.5) * (h^0.5) * u)' & 
         		'DT 1 v = 0' < true >  [[> wl!(h) ]]> GetCmd 
	      
	      GetCmd ::= vc?(v)
		  
		  WaterTank ::= REPEAT(Plant)   
		  
		  
	**};
	
end WaterTank.impl;

end AADL2HCSP;